import streamlit as st
import matplotlib.pyplot as plt
import pandas as pd
import requests
import util
import json
import sys

# URL da API local
API_URL = "http://127.0.0.1:8000"

# Verificar senha de acesso
if not util.check_password():
    st.stop()  # Se tiver incorreta, n√£o permite prosseguir na aplica√ß√£o.

# Recuperar os dados via API - DiagnoÃÅstico de DoencÃßas Cardiovasculares
response = requests.get(f"{API_URL}/get-dataset")

# Se o c√≥digo da resposta da API for diferente de 200, apresenta mensagem de erro e da exce√ß√£o 
if response.status_code != 200:
    msg = f"Falha ao recuperar os dados: {response.status_code}"
    print(msg)
    raise Exception(msg)

# Fazer a convers√£o do JSON de retorno para dataframe
dados_json = json.loads(response.json())
dados = pd.DataFrame(dados_json)

# Montar layout
st.title('App dos dados de diagn√≥stico de doen√ßa cardiovascular')
data_analyses_on = st.toggle('Exibir an√°lise dos dados')

# Se foi selecionado para apresentar os dados, apresenta o dataframe, um histograma de idades e a quantidade de registros com e sem doen√ßa.
if data_analyses_on:

    # Apresenta o dataframe
    st.dataframe(dados)

    # Apresentar um histograma de idades
    st.header("Histograma - Idade")
    fig = plt.figure()
    plt.hist(dados['age'], bins=30)
    plt.xlabel("Idade")
    plt.ylabel("Quantidade")
    st.pyplot(fig)

    # Gerar gr√°fico com a quantidade de registros de diagn√≥sticos sem doen√ßa(1) e com doen√ßa(2).
    st.header("Diagn√≥stico de doen√ßa card√≠aca (diagn√≥stico angiogr√°fico)")
    st.bar_chart(dados.target.value_counts())

# Vai montar as linhas de campos de entrada de dados
st.header('Preditor de doen√ßa card√≠aca')

# Row 1
col1, col2, col3 = st.columns(3)
with col1:
    #age - idade em anos
    age = st.number_input("Age in years", step=1, min_value=0)

with col2:
    #sex - sexo do paciente [0: mulher, 1: homem]
    classes = ["Female", "Male"]
    sex = st.selectbox('Sex', classes)

with col3:
    #cp - tipo da dor tor√°cica [1: angina t√≠pica, 2: angina at√≠pica, 3: dor n√£o card√≠aca, 4: assintom√°tica]
    classes = ["Typical Angina", "Atypical Angina", "Non-anginal Pain", "Asymptomatic"]
    cp = st.selectbox('Chest pain', classes)

# Row 2
col1, col2, col3 = st.columns(3)
with col1:
    #trestbps - press√£o arterial em repouso
    trestbps = st.number_input("Resting Blood Pressure", step=1, min_value=0)

with col2:
    #chol - colesterol s√©rico (mg/dl)
    chol = st.number_input("Serum Cholesterol (mg/dl)", step=1, min_value=0)

with col3:
    #fbs - a√ßucar no sangue em jejum > 120mg/dl [0: False, 1: True]
    classes = ["False", "True"]
    fbs = st.selectbox('Fasting Blood Sugar > 120mg/dl', classes)

# Row 3
col1, col2, col3 = st.columns(3)
with col1:
    #restecg - resultado do eletrocardiografia de repouso 
    #[0: normal, 
    # 1: anormalidades de ST-T (invers√£o da onda T e eleva√ß√£o ou depress√£o de > 0.05mV), 
    # 2: hipertrofia ventricular esquerda prov√°vel ou definitiva (pelos crit√©rios de Romhilt-Estes)]
    classes = ["Normal", "ST-T abnormalities", "Probable or definite left ventricular hypertrophy"]
    restecg = st.selectbox("Resting Electrocardiography Result", classes)

with col2:
    #thalach - frequ√™ncia card√≠aca m√°xima atingida
    thalach = st.number_input("Maximum Heart Rate Reached", step=1, min_value=0)

with col3:
    #exang - angina induzida pelo exerc√≠cio [0: n√£o, 1: sim]
    classes = ["No", "Yes"]
    exang = st.selectbox('Exercise-induced Angina', classes)

# Row 4
col1, col2, col3 = st.columns(3)
with col1:
    #oldpeak - depess√£o do segmento ST induzida pelo exerc√≠cio em rela√ß√£o ao repouso
    oldpeak = st.number_input("Exercise-induced ST segment depression relative to rest", step=0.1, min_value=0.0)

with col2:
    #slope - inclina√ß√£o do segmento ST no pico do exerc√≠cio
    classes = ["Upsloping", "Flat", "Downsloping"]
    slope = st.selectbox('Slope of the Peak Exercise ST Segment', classes)

with col3:
    #ca - n√∫mero de vasos principais colorido por fluoroscopia
    classes = [0, 1, 2, 3]
    ca = st.selectbox('Number of Major Vessels Colored by Flourosopy', classes)

# Row 4
col1, col2, col3 = st.columns(3)
with col1:
    # thal (Thalassemia) - teste de esfor√ßo card√≠aco [3: normal, 6: defeito fixo, 7: defeito revers√≠vel]
    classes = ["Normal", "Fixed defect", "Reversible defect"]
    thal = st.selectbox('Thalassemia', classes)

with col2:
     # Bot√£o para realizar a predi√ß√£o
     submit = st.button("Verificar")

# Dicion√°rio para armazenar dados do paciente
paciente = {}

# Verificar se o bot√£o de fazer a predi√ß√£o foi pressionado ou se o campo 'target' est√° em cache
if submit or 'target' in st.session_state:
    # Alimentar o objeto do paciente com os dados que precisamos
    paciente = {
        'age': age,
        'sex': sex,
        'cp': cp,
        'trestbps': trestbps,
        'chol': chol,
        'fbs': fbs,
        'restecg': restecg,
        'thalach': thalach,
        'exang': exang,
        'oldpeak': oldpeak,
        'slope': slope,
        'ca': ca,
        'thal': thal,
    }

    # Realiza uma requisi√ß√£o POST para a nossa API, com o intuito de realizar a predi√ß√£o
    # Para a predi√ß√£o √© enviado o objeto do paciente como um JSON.
    response = requests.post(f"{API_URL}/predict", json=json.dumps(paciente))
    result = None

    # Se o c√≥digo da resposta da API for diferente de 200, apresenta mensagem de erro e da exce√ß√£o 
    if response.status_code != 200:
        msg = f"Falha ao efetuar a predi√ß√£o: {response.status_code}"
        print(msg)
        raise Exception(msg)

    # Recuperar o retorno da API
    result = response.json()

    if result is not None:
        disease = result

        # Resultado: 1 = no disease | 2 = disease
        if disease == 1:
            # Caso o paciente n√£o apresentar ter problemas card√≠acos, apresenta uma mensagem positiva!
            st.subheader("Paciente n√£o tem problemas card√≠acos! üëèüéâüéÜ")
            if 'target' not in st.session_state:
                st.balloons()
        else:
            # Caso o paciente apresente ter problemas card√≠acos, apresenta uma mensagem triste!
            st.subheader("Infelizmente foi detectado problema card√≠aco, seria adequado buscar orienta√ß√£o m√©dica. üò¢üòüü•∫")
            if 'target' not in st.session_state:
                st.snow()

        # Armazenar o resultado da predi√ß√£o na sess√£o
        st.session_state['target'] = disease

    # Valida√ß√£o para solicitar feedback quando for feita uma nova predi√ß√£o
    if paciente and 'target' in st.session_state:
        st.write("A predi√ß√£o est√° correta?")

        col1, col2, col3 = st.columns([1,1,5])
        with col1:
            # Bot√£o para feedback de predi√ß√£o correta
            correct_prediction = st.button("üëç")
        with col2:
            # Bot√£o para feedback de predi√ß√£o incorreta
            wrong_prediction = st.button("üëé")

        # Caso o usu√°rio der um feedback da precis√£o, vamos agradecer e armazenar a predi√ß√£o no arquivo local JSON
        if correct_prediction or wrong_prediction:
            message = "Muito obrigado pelo seu feedback. "

            if wrong_prediction:
                message += "Iremos utilizar esses dados para melhorar nosso modelo."

            # Armazenar a informa√ß√£o se a predi√ß√£o foi correta ou n√£o, para futuro uso de apresenta√ß√£o de dados.
            if correct_prediction:
                paciente['CorrectPrediction'] = True
            elif wrong_prediction:
                paciente['CorrectPrediction'] = False

            # Armazenar a predi√ß√£o no objeto do paciente
            paciente['target'] = st.session_state['target']
            
            # Apresentar a mensagem para o usu√°rio
            st.write(message)

            # Salvar predi√ß√£o no arquivo JSON via requisi√ß√£o POST para nossa API
            response = requests.post(f"{API_URL}/save-prediction", json=json.dumps(paciente))

            # Se o c√≥digo da resposta da API for diferente de 200, apresenta mensagem de erro e da exce√ß√£o 
            if response.status_code != 200:
                msg = f"Falha ao salvar a predi√ß√£o: {response.status_code}"
                print(msg)
                raise Exception(msg)

    # Caso foi feita uma predi√ß√£o, apresentamos um bot√£o para iniciar uma nova an√°lise
    col1, col2, col3 = st.columns(3)

    with col2:
        new_test = st.button("Iniciar nova an√°lise")

        # Se pressionou o bot√£o de nova an√°lise e tem dados em cache de predi√ß√£o, vai limpar
        if new_test and 'target' in st.session_state:
            # Limpar dados da sess√£o
            del st.session_state['target']
            st.rerun()

# Bot√£o apresentar os dados de acur√°cia
accuracy_prediction_on = st.toggle("Exibir acur√°cia")

if accuracy_prediction_on:
    # Recuperar as predi√ß√µes salvas em nosso arquivo JSON via requisi√ß√£o GET para a API
    response = requests.get(f"{API_URL}/get-all-predictions")
    
    # Se o c√≥digo da resposta da API for diferente de 200, apresenta mensagem de erro e da exce√ß√£o 
    if response.status_code != 200:
        msg = f"Falha ao recuperar as predi√ß√µes: {response.status_code}"
        print(msg)
        raise Exception(msg)

    predictions = response.json()

    # Inicializar as vari√°veis para calcular a acur√°cia
    num_total_predictions = len(predictions)
    correct_predictions = 0
    total = 0
    accuracy_hist = []

    # Para cada predi√ß√£o vamos fazer o c√°lculo para gerar um hist√≥rico de acur√°cia e salvando o n√∫mero de predi√ß√µes corretas
    for index, paciente in enumerate(predictions):
        
        total = total + 1
        if paciente['CorrectPrediction'] == True:
            correct_predictions += 1

        temp_accuracy = correct_predictions / total if total else 0

        # Adiciona a acur√°cia calculada para o array de hist√≥rico
        accuracy_hist.append(round(temp_accuracy, 2))

    # Calcular a acur√°cia geral das predi√ß√µes
    accuracy = correct_predictions / num_total_predictions if num_total_predictions else 0

    # Apresentar m√©tica no layout
    st.metric("Acur√°cia", round(accuracy, 2))

    # Apresentar o gr√°fico de hist√≥rico de acur√°cia
    st.subheader("Hist√≥rico de acur√°cia")
    st.line_chart(accuracy_hist)


